fill = "red"
)+theme(axis.title=element_text(size=14,face="bold"),axis.text.x = element_text(size = 12, angle = 45))
}
var_scatterplot(Bdata, Count, Building)
devtools::document()
?var_scatterplot
devtools::document()
?var_table
devtools::document()
devtools::document()
?var_table
devtools::document()
?var_table
devtools::document()
?var_table
Cho=read.csv("~/R/2023Spring_MAP/dataset/C4 Cholesterol.csv")
library("easyExp")
var_boxplot(Cho, Cholesterol, Drug, Diet)
var_scatterplot(Cho, Cholesterol, Drug)
var_table(Cho, Cholesterol, Drug, Exercies, Diet)
devtools::document()
?var_table
var_table(Cho, Cholesterol, Drug, Exercies, Diet)
knitr::opts_chunk$set(echo = TRUE)
Cho=read.csv("~/R/2023Spring_MAP/dataset/C4 Cholesterol.csv")
library("easyExp")
var_boxplot(Cho, Cholesterol, Drug, Diet)
var_table(Cho, Cholesterol, Drug, Exercies, Diet)
library("easyExp")
var_table(Cho, Cholesterol, Drug, Exercies, Diet)
library("easyExp")
var_table(Cho, Cholesterol, Drug, Exercies, Diet)
devtools::document()
library("easyExp")
var_table(Cho, Cholesterol, Drug, Exercies, Diet)
devtools::document()
library("easyExp")
var_table(Cho, Cholesterol, Drug, Exercies, Diet)
library("easyExp")
var_table(Cho, Cholesterol, Drug, Exercies, Diet)
devtools::document()
knitr::opts_chunk$set(echo = TRUE)
library("easyExp")
var_table(Cho, Cholesterol, Drug, Exercies, Diet)
Cho=read.csv("~/R/2023Spring_MAP/dataset/C4 Cholesterol.csv")
library("easyExp")
var_table(Cho, Cholesterol, Drug, Exercies, Diet)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library("easyExp")
var_table(Cho, Cholesterol, Drug, Exercies, Diet)
library("easyExp")
var_table(Cho, Cholesterol, Drug, Exercies, Diet, type=2)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
knitr::opts_chunk$set(echo = TRUE)
library(easyExp)
var_boxplot(Popcorn, PopRate, Microwave, Time)
var_table(Popcorn, PopRate, Microwave, Time)
var_table(Popcorn, PopRate, Microwave, Time, type = 2)
var_table = function(dataset, response, x1, x2=NULL, x3=NULL, type=1){
library(dplyr)
summary_table = group_by(dataset, {{x1}},{{x2}},{{x3}}) %>%
summarise(GroupVariance=var({{response}}),
SampleSize=n(), .groups = 'drop')
summary_df = as.data.frame(summary_table)
summary_df = summary_df %>%
mutate_if(is.numeric, round, digits = 2)
if (type == 1){
library(reactablefmtr)
reactable(summary_df,defaultColDef = colDef(cell = data_bars(summary_df, box_shadow = TRUE, round_edges = TRUE,
text_position = "outside-base",
fill_color = c("#e81cff", "#40c9ff"),
background = "#e5e5e5",fill_gradient = TRUE)))
}
else{
library(formattable)
library(DT)
as.datatable(formattable(summary_df, list(SampleSize = color_bar("#80ed99"),GroupVariance = color_bar("#f28482"))))
# table = formattable(summary_df, list(SampleSize = color_bar("#80ed99"),GroupVariance = color_bar("#f28482")))
# as.datatable(table)
}
}
var_table(Bdata, Count, Building, Location, type = 2)
var_table(Popcorn, PopRate, Microwave, Time, type = 2)
library(easyExp)
var_table(Popcorn, PopRate, Microwave, Time, type = 2)
var_table(Popcorn, PopRate, Microwave, Time, type = 2)
background = "#e5e5e5",fill_gradient = TRUE)))
devtools::document()
devtools::document()
var_table(Popcorn, PopRate, Microwave, Time, type = 2)
?var_table
aov1 = aov(log(Count)~Building*Location, Bdata)
normal_err(Bdata, log(Count),Building,Location)
Bdata=read.csv("~/R/2023Spring_MAP/dataset/C4 Bacteria.csv")
aov1 = aov(log(Count)~Building*Location, Bdata)
normal_err(aov1$residuals, bins=20)
normal_err = function(dataset_residual, response, x1, x2=NULL, interaction = TRUE, bins = 30){
if (nargs()>2){
library(rlang)
response <- parse_expr(quo_name(enquo(response)))
x1 <- parse_expr(quo_name(enquo(x1)))
x2 <- parse_expr(quo_name(enquo(x2)))
if (interaction == TRUE){
aov1=eval_tidy(expr(aov(!!response ~ !!x1*!!x2, data = dataset_residual)))
}
else{
aov1=eval_tidy(expr(aov(!!response ~ !!x1+!!x2, data = dataset_residual)))
}
residual_df = as.data.frame(aov1$residuals)
colnames(residual_df) = c("residual")
}
else{
residual_df = as.data.frame(dataset_residual)
colnames(residual_df) = c("residual")
}
library(ggplot2)
library(gridExtra)
qqplot <- ggplot(residual_df, aes(sample = residual))
qqplot = qqplot + stat_qq() + stat_qq_line() + labs(title="QQPLOT for Error Terms")
hist = ggplot(residual_df, aes(x=residual)) + geom_histogram(bins=bins, fill="lightblue")+ labs(title="Histogram for Error Terms")
grid.arrange(qqplot, hist, ncol=1)
}
aov1 = aov(log(Count)~Building*Location, Bdata)
normal_err(aov1$residuals, bins=20)
normal_err(Bdata, log(Count),Building,Location)
devtools::document()
devtools::document()
devtools::document()
normal_err(Bdata, log(Count),Building,Location)
devtools::document()
devtools::document()
library(easyExp)
normal_err(Popcorn, PopRate, Microwave, Time)
aov1 = aov(log(Count)~Building*Location, Bdata)
Bdata=read.csv("~/R/2023Spring_MAP/dataset/C4 Bacteria.csv")
aov1 = aov(log(Count)~Building*Location, Bdata)
normal_err(aov1$residuals, bins=20)
?normal_err
iid = function(dataset, anova_model){
library(ggplot2)
library(gridExtra)
residual_fitted = ggplot(anova_model, aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0)+xlab("fitted value")+ylab("residual")
dataset$rownum = 1:dim(dataset)[1]
residual_order = ggplot(anova_model, aes(x=dataset$rownum, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0)+xlab("row number")+ylab("residual")
grid.arrange(residual_fitted, residual_order, ncol=1)
}
aov1 = aov(log(Count)~Building*Location, Bdata)
iid(Bdata, aov1)
geom_point() +
devtools::document()
devtools::document()
devtools::document()
knitr::opts_chunk$set(echo = TRUE)
aov1 = aov(PopRate~Microwave*Time, Popcorn)
iid(Popcorn, aov1)
?Popcorn
Cho=read.csv("~/R/2023Spring_MAP/dataset/C4 Cholesterol.csv")
Movies=read.csv("~/R/2023Spring_MAP/dataset/C4 Movies.csv")
Bacteria=read.csv("~/R/2023Spring_MAP/dataset/C4 Bacteria.csv")
Soda=read.csv("~/R/2023Spring_MAP/dataset/C4 Soda.csv")
Soda$logFizz = log(Soda$Fizz)
MemoryA=read.csv("~/R/2023Spring_MAP/dataset/C4 MemoryA.csv")
MemoryA$sqrtWords = sqrt(MemoryA$Words)
PaperTowels=read.csv("~/R/2023Spring_MAP/dataset/C4 PaperTowels.csv")
PaperTowels$Water<-as.factor(PaperTowels$Water)
PaperTowels$LogStrength<-log(PaperTowels$Strength)
Cups=read.csv("~/R/2023Spring_MAP/dataset/C4 Cups.csv")
Cups$Side.Temp<-as.factor(Cups$Side.Temp)
Cups$Bottom.Temp<-as.factor(Cups$Bottom.Temp)
Cups$Bottom.Pressure<-as.factor(Cups$Bottom.Pressure)
devtools::use_data(Bacteria)
usethis::use_data(Bacteria)
usethis::use_data(Cho)
usethis::use_data(Cups)
usethis::use_data(MemoryA)
usethis::use_data(Movies)
usethis::use_data(PaperTowels)
usethis::use_data(Soda)
View(Movies)
View(Movies)
devtools::document()
?Movies
devtools::document()
devtools::document()
?Movies
devtools::document()
?Movies
devtools::document()
?Movies
devtools::document()
?Movies
Cholesterol=read.csv("~/R/2023Spring_MAP/dataset/C4 Cholesterol.csv")
var_scatterplot(Cholesterol, Cholesterol, Drug)
library("easyExp")
var_table(Cholesterol, Cholesterol, Drug, Exercies, Diet, type=2)
var_table(Cholesterol, Cholesterol, Drug, Diet, Exercies, type = 2)
library("easyExp")
var_table(Cholesterol, Cholesterol, Drug, Exercies, Diet)
library("easyExp")
var_table(Cholesterol, Cholesterol, Drug, Diet, Exercies, type = 2)
aov1 = aov(Cholesterol~Drug*Diet*Exercies, Cholesterol)
normal_err(aov1$residuals)
aov1 = aov(Cholesterol~Drug*Diet*Exercies, Cholesterol)
iid(Cholesterol, aov1)
main_plot(Cholesterol, Cholesterol, Drug, Diet, Exercies, c(180,220))
interaction_plot(Cholesterol, Cholesterol, Drug, Diet)
aov1 = aov(Cholesterol~Drug*Diet*Exercies, Cholesterol)
# summary(aov1)
normal_err(aov1$residuals)
var_table(Popcorn, PopRate, Microwave, Time, type = 2)
var_table(Movies, Total.Gross, Genre)
var_table(Movies, Total.Gross, Rating, type = 2)
usethis::use_data(Cholesterol)
devtools::load_all()
devtools::install()
require("DT")
clear
devtools::install()
var_table(Movies, Total.Gross, Genre)
devtools::document()
devtools::load_all()
devtools::install()
devtools::install_github("HuandongChang/easyExp")
data(Movies)
normal_err(Movies, Total.Gross, Genre, Rating, interaction = TRUE)
aov1 = aov(Total.Gross~Genre*Rating, Movies)
iid(Movies, aov1)
var_table(Movies, Total.Gross, Rating)
var_table(Movies, Total.Gross, Rating, type=2)
var_table(Movies, Total.Gross, Rating, type=2)
devtools::document()
var_table(Movies, Total.Gross, Rating, type=2)
devtools::document()
?datatable
?as.datatable
devtools::document()
devtools::document()
var_table(Movies, Total.Gross, Rating, type=2)
var_table = function(dataset, response, x1, x2=NULL, x3=NULL, type=1){
library(dplyr)
summary_table = group_by(dataset, {{x1}},{{x2}},{{x3}}) %>%
summarise(GroupVariance=var({{response}}),
SampleSize=n(), .groups = 'drop')
summary_df = as.data.frame(summary_table)
summary_df = summary_df %>%
mutate_if(is.numeric, round, digits = 2)
if (type == 1){
library(reactablefmtr)
reactable(summary_df,defaultColDef = colDef(cell = data_bars(summary_df, box_shadow = TRUE, round_edges = TRUE,
text_position = "outside-base",
fill_color = c("#e81cff", "#40c9ff"),
background = "#e5e5e5",fill_gradient = TRUE)))
}
else{
library(formattable)
library(DT)
datatable(formattable(summary_df, list(SampleSize = color_bar("#80ed99"),GroupVariance = color_bar("#f28482"))))
# table = formattable(summary_df, list(SampleSize = color_bar("#80ed99"),GroupVariance = color_bar("#f28482")))
# as.datatable(table)
}
}
var_table(Bdata, Count, Building, Location, type = 2)
Bdata=read.csv("~/R/2023Spring_MAP/dataset/C4 Bacteria.csv")
var_table(Bdata, Count, Building, Location, type = 2)
var_table = function(dataset, response, x1, x2=NULL, x3=NULL, type=1){
library(dplyr)
summary_table = group_by(dataset, {{x1}},{{x2}},{{x3}}) %>%
summarise(GroupVariance=var({{response}}),
SampleSize=n(), .groups = 'drop')
summary_df = as.data.frame(summary_table)
summary_df = summary_df %>%
mutate_if(is.numeric, round, digits = 2)
if (type == 1){
library(reactablefmtr)
reactable(summary_df,defaultColDef = colDef(cell = data_bars(summary_df, box_shadow = TRUE, round_edges = TRUE,
text_position = "outside-base",
fill_color = c("#e81cff", "#40c9ff"),
background = "#e5e5e5",fill_gradient = TRUE)))
}
else{
library(formattable)
library(DT)
as.datatable(formattable(summary_df, list(SampleSize = color_bar("#80ed99"),GroupVariance = color_bar("#f28482"))))
# table = formattable(summary_df, list(SampleSize = color_bar("#80ed99"),GroupVariance = color_bar("#f28482")))
# as.datatable(table)
}
}
var_table(Bdata, Count, Building, Location, type = 2)
# as.datatable(table)
devtools::document()
devtools::document()
var_table(Bdata, Count, Building, Location, type = 2)
var_table(Bacteria, Count, Building, Location, type = 2)
var_table(Movies, Count, Building, Location, type = 2)
var_table(Bdata, Count, Building, Location, type = 2)
devtools::install_github("yourusername/myfirstpackage")
devtools::install_github("HuandongChang/easyExp")
devtools::document()
devtools::document()
var_table(Bacteria, Count, Building, Location, type = 2)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
var_table(Bacteria, Count, Building, Location)
data(Towels)
data(Towels2)
library("easyExp")
data(Towels2)
data(MemoryA)
knitr::opts_chunk$set(echo = TRUE)
PaperTowels=read.csv("~/R/2023Spring_MAP/dataset/C4 PaperTowels.csv")
PaperTowels$Water<-as.factor(PaperTowels$Water)
PaperTowels$LogStrength<-log(PaperTowels$Strength)
Towels2=read.csv("~/R/2023Spring_MAP/dataset/C4 Towels2.csv")
Towels2=read.csv("~/R/2023Spring_MAP/dataset/C4 PaperTowels.csv")
Towels2$Water<-as.factor(Towels2$Water)
Towels2$LogStrength<-log(Towels2$Strength)
usethis::use_data(Towels)
usethis::use_data(Towels2)
devtools::document()
devtools::load_all()
devtools::install()
devtools::document()
main_plot(Bacteria, Count, Building, Location)
devtools::document()
main_plot(Bacteria, Count, Building, Location)
devtools::document()
devtools::load_all()
devtools::install()
?main_plot
?interaction_plot
?easyExp
??easyExp
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
.rs.restartR()
devtools::document()
devtools::load_all()
devtools::install()
.Last.error
devtools::document()
devtools::load_all()
devtools::install()
devtools::document()
devtools::load_all()
devtools::install()
devtools::document()
devtools::document()
devtools::load_all()
devtools::install()
devtools::document()
devtools::load_all()
devtools::install()
devtools::install_github("HuandongChang/easyExp")
?easyExp
citation("easyExp")
devtools::document()
devtools::document()
devtools::load_all()
devtools::install()
usethat::use_vignette("introduction")
install.packages("usethat")
use_vignette("introduction")
devtools::use_vignette("introduction")
use_vignette("introduction")
install.packages("vignette")
install.packages("usethis")
install.packages("usethis")
usethis::use_vignette("introduction")
knitr::opts_chunk$set(echo = TRUE)
library("easyExp")
var_boxplot(Cholesterol, Cholesterol, Drug, Diet)
var_scatterplot(Cholesterol, Cholesterol, Drug)
library("easyExp")
var_table(Cholesterol, Cholesterol, Drug, Exercies, Diet)
library("easyExp")
var_table(Cholesterol, Cholesterol, Drug, Diet, Exercies, type = 2)
aov1 = aov(Cholesterol~Drug*Diet*Exercies, Cholesterol)
normal_err(aov1$residuals)
aov1 = aov(Cholesterol~Drug*Diet*Exercies, Cholesterol)
iid(Cholesterol, aov1)
main_plot(Cholesterol, Cholesterol, Drug, Diet, Exercies, c(180,220))
Soda=read.csv("~/R/2023Spring_MAP/dataset/C4 Soda.csv")
Soda$logFizz = log(Soda$Fizz)
var_boxplot(Soda, logFizz, Soda, Tilt)
var_scatterplot(Soda, logFizz, Soda, Tilt)
var_table(Soda, logFizz, Soda, Tilt, Temp)
aov1 = aov(logFizz~Soda*Tilt*Temp, Soda)
normal_err(aov1$residuals)
Towels2=read.csv("~/R/2023Spring_MAP/dataset/C4 PaperTowels.csv")
Towels2$Water<-as.factor(Towels2$Water)
Towels2$LogStrength<-log(Towels2$Strength)
var_boxplot(Towels2, LogStrength, Brand, Water)
var_scatterplot(Towels2, LogStrength, Brand, Water)
var_table(Towels2, LogStrength, Brand, Water)
normal_err(Towels2, LogStrength, Brand, Water, interaction = TRUE)
aov1 = aov(LogStrength~Brand*Water, Towels2)
iid(Towels2, aov1)
main_plot(Towels2, LogStrength, Brand, Water, ylim=c(5,8))
interaction_plot(Towels2, LogStrength, Brand, Water)
anova_table(Towels2, LogStrength, Brand, Water)
anova_table = function(dataset, response, x1, x2, interaction = TRUE){
library(dplyr)
library(ggplot2)
library(rlang)
response <- parse_expr(quo_name(enquo(response)))
x1 <- parse_expr(quo_name(enquo(x1)))
x2 <- parse_expr(quo_name(enquo(x2)))
if (interaction == TRUE){
aov1=eval_tidy(expr(aov(!!response ~ !!x1*!!x2, data = dataset)))
}
else{
aov1=eval_tidy(expr(aov(!!response ~ !!x1+!!x2, data = dataset)))
}
summary(aov1)
}
anova_table(Bdata, Count, Building, Location)
main_plot(Towels2, LogStrength, Brand, Water, ylim=c(5,8))
anova_table(Towels2, LogStrength, Brand, Water)
anova_table(Towels2, LogStrength, Brand, Water)
summary(aov1)
#anova_table(Towels2, LogStrength, Brand, Water)
summary(aov1)
anova_table(Towels2, LogStrength, Brand, Water)
#summary(aov1)
#anova_table(Towels2, LogStrength, Brand, Water)
summary(aov1)
Cups=read.csv("~/R/2023Spring_MAP/dataset/C4 Cups.csv")
Cups$Side.Temp<-as.factor(Cups$Side.Temp)
Cups$Bottom.Temp<-as.factor(Cups$Bottom.Temp)
Cups$Bottom.Pressure<-as.factor(Cups$Bottom.Pressure)
var_boxplot(Cups, Leaks, Side.Temp, Bottom.Temp)
var_scatterplot(Cups, Leaks, Side.Temp, Bottom.Temp)
var_table(Cups, Leaks, Side.Temp, Bottom.Temp)
normal_err(Cups, Leaks, Side.Temp, Bottom.Temp, interaction = TRUE)
library("easyExp")
var_boxplot(Cholesterol, Cholesterol, Drug, Diet)
var_scatterplot(Cholesterol, Cholesterol, Drug)
library("easyExp")
var_table(Cholesterol, Cholesterol, Drug, Exercies, Diet)
aov1 = aov(Cholesterol~Drug*Diet*Exercies, Cholesterol)
normal_err(aov1$residuals)
aov1 = aov(Cholesterol~Drug*Diet*Exercies, Cholesterol)
iid(Cholesterol, aov1)
main_plot(Cholesterol, Cholesterol, Drug, Diet, Exercies, c(180,220))
interaction_plot(Cholesterol, Cholesterol, Drug, Diet)
aov1 = aov(Cholesterol~Drug*Diet*Exercies, Cholesterol)
# summary(aov1)
normal_err(aov1$residuals)
library(easyExp)
main_plot(Towels2, LogStrength, Brand, Water, ylim=c(5,8))
main_plot(Towels2, LogStrength, Brand, Water)
var_boxplot(Towels2, LogStrength, Brand, Water)
var_scatterplot(Towels2, LogStrength, Brand, Water)
var_table(Towels2, LogStrength, Brand, Water)
normal_err(Towels2, LogStrength, Brand, Water, interaction = TRUE)
aov1 = aov(LogStrength~Brand*Water, Towels2)
iid(Towels2, aov1)
summary(aov1)
main_plot(Towels2, LogStrength, Brand, Water)
interaction_plot(Towels2, LogStrength, Brand, Water)
?var_boxplot
?var_scatterplot
?var_table
?normal_err
iid
?iid
?main_plot
?interaction_plot
var_boxplot(Towels2, LogStrength, Brand, Water)
var_boxplot(Towels2, LogStrength, Brand, Water)
# knitr::opts_chunk$set(
#   collapse = TRUE,
#   comment = "#>"
# )
knitr::opts_chunk$set(collapse = TRUE, comment = "#>", fig.width = 7, fig.height = 4, fig.align = "center")
?normal_err
?iid
?main_plot
normal_err(Towels2, LogStrength, Brand, Water, interaction = TRUE)
# Alternatively, you can use residuals as the function input in cases like split-plot designs.
aov1 = aov(LogStrength~Brand*Water, Towels2)
normal_err(aov1$residuals)
normal_err(Towels2, LogStrength, Brand, Water, interaction = TRUE)
# Alternatively, you can use residuals as the function input in cases like split-plot designs.
aov1 = aov(LogStrength~Brand*Water, Towels2)
# normal_err(aov1$residuals)
iid(Towels2, aov1)
main_plot(Towels2, LogStrength, Brand, Water)
main_plot(Towels2, LogStrength, Brand, Water)
main_plot(Towels2, LogStrength, Brand, Water)
devtools::document()
devtools::document()
devtools::load_all()
devtools::install()
knitr::knit2html('introduction.Rmd')
knitr::knit2html('vignettes/introduction.Rmd')
rmarkdown::render("vignettes/introduction.Rmd")
